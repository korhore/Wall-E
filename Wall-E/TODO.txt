We must study main architectre
1) We need one direction path in(out directrion handling of sensation
2) Do we have dedicated robots for bot way for both way or
3) Do we have one robot that handles both ways with ywo deficated robots, one fot in and one for ont way.
4) In and out have their own rtpe process-mehod
5) WE could also have one common robot, that simple can be dedicated for in/out/both ways processing.
   Maybe this is best way, act as cells do, dedicate as needed. Examples are now for Voice and Sockets.
   
Maybe best architecture is use main middle and leaf-architecture for Robot.
- Main and Leaf are implemented atready
- Middle 
-- WorMemenory processng
-- uses two direction Axon
-- Leafs are mucle and sense
-- change Robot.process to support this
   
? Capabilities handling for sockets
- OK, if two servers are started fron down
- NOK if if one server is running and other is stopped ans started many times.

Implement two sides Axon. Robot delivers sensation by direction.

Main architecture
- Simplity removing Seeing, Hearing and Moving layers. Keep just working subinstances
- Make basic class Robot, with
- derived MainRobot for highest level Robot, including TCPSocket functionality
- derivedd leaf-subrobots as they are now
- Robot has default functionality for in or out directions.
  Decision is by capabilities, is this subInstance In or Out direection.
  If no capabiliyies, then no functionality.

- all capability implementation like Seeing, Hearting, Moving, Networking, etc
  are subclasses of Robot
- Robot handles Sensastions and its subrobots using settings from a config file,
  or/and fron subRobot itself, which tells its capabilitis
- Robot has one outAxon (except Inteelligence capability) which handles
  all Sensation for "out" direction
- Robot has many inAxons for subRobots that are in samre time these Robots
  inAxons.
- Finally there are leafRobots that dont have any more subRobots. Thesae are
  sinal implementation of one (basically or more) capability
  
- arrange code by copabilities as modules without denpendencies: moving,
  hearing, seeing, sensing, etc. This can solve import problem,
  but it would be easier to develop capabilities anyway.
  
- MainRobot is final mainRobot
- Subrobots use their own working subdirectory and they are thread
- Subrobots have their own implementation subdirectory,
  so they can be started there. Implementation is still unclear, can we use same
  class name "Robot" and if not, how we can import subSobits implementation
  to be started. Lets see.

- networking clients use also trheir own subdirectories.
- There must be way to override capabilities so we can restricy what Robots over
  can know about us and what we handle from them. All network robots capabilities
  should be False by default

- tcp-clients and servers have tyoe remote to distict fron local robots

TODO Add serverpath to Sensations to avoid sensation be tranferred to
one server and then back again.
  
    
 - OK Make Capabilities-class. Can be iplemented in Config. In config should be
   anyway hosts, property, where we Aass hosts that have contacted us and
   hosts that we add manually. Start with this.
   
- OK Implement Identity and Virtual instance. That way we can test Walle to meet Eva
  in same process with threads, so developing will be much faster than using
  many physical servers, but functionality will be exactly same.
  Need some changes to Confif, Axen etc. Rename main class as Robot(Server)
  
  We need also functional status od robot, StudyOwnIdentity, Sleeping, Normal, etc
  
- OK Robot n to handle sensation routing.

- OK Seems, that Calibrating logic with direction will become broken, when direction is set
  to Sensation. Fix this later, because we donnt yet have hardware suitable for
  direction hearing. This has been experimental any way
  
  - OK Move moving to its own submodule and fix Sensation in Romeo.
    This module should process all moving and observation Sensations
    
- OK Robot start 3! times!!!!!!!!!
- OK correct this in Config so that one instance of it handles only one config,
  but can start otser instance for virtual and subrobots
  
  dependencies: for pillow (pip3 install pillow)
 sudo apt-get install libjpeg-dev -y
sudo apt-get install zlib1g-dev -y
sudo apt-get install libfreetype6-dev -y
sudo apt-get install liblcms1-dev -y
sudo apt-get install libopenjp2-7 -y
sudo apt-get install libtiff5 -y

MainRobot needs
pip3 install daemon
pip3 install lockfile
pip3 install pyyaml # Required to save tensorflow models in YAML format

raspberry pi 3
tensorflow==1.8
Ubuntu 18.5
tensorflow==1.5
Ubuntu 14.04
sudo -H pip3 install --upgrade tensorflow --ignore-installed six
-- will get tensorflow 1.13